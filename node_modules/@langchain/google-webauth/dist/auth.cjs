"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebGoogleAuth = void 0;
const env_1 = require("@langchain/core/utils/env");
const google_common_1 = require("@langchain/google-common");
const google_1 = require("web-auth-library/google");
class WebGoogleAuth extends google_common_1.GoogleAbstractedFetchClient {
    constructor(fields) {
        super();
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const options = fields?.authOptions;
        const accessToken = options?.accessToken;
        const credentials = options?.credentials ??
            (0, env_1.getEnvironmentVariable)("GOOGLE_WEB_CREDENTIALS") ??
            (0, env_1.getEnvironmentVariable)("GOOGLE_VERTEX_AI_WEB_CREDENTIALS");
        if (credentials === undefined)
            throw new Error(`Credentials not found. Please set the GOOGLE_WEB_CREDENTIALS environment variable or pass credentials into "authOptions.credentials".`);
        this.options = (0, google_common_1.ensureAuthOptionScopes)({ ...options, accessToken, credentials }, "scope", fields?.platformType);
    }
    get clientType() {
        return "webauth";
    }
    async getProjectId() {
        const credentials = (0, google_1.getCredentials)(this.options.credentials);
        return credentials.project_id;
    }
    async request(opts) {
        let { accessToken } = this.options;
        if (accessToken === undefined) {
            accessToken = await (0, google_1.getAccessToken)(this.options);
        }
        const authHeader = {
            Authorization: `Bearer ${accessToken}`,
        };
        return this._request(opts?.url, opts, authHeader);
    }
}
exports.WebGoogleAuth = WebGoogleAuth;
